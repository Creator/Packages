 -- lex 1.0.1 by Benedict Allen
 --[[ The MIT License (MIT)

Copyright (c) 2015 Benedict Allen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 ]]
local e="lex"local t=setmetatable({},{__index=getfenv()}) t._G=t local a={} local function o(n) if a[n]then local s,h=loadstring(a[n],"["..e.."] "..n..".lua")if not s then error(h,0)end local r=setmetatable({},{__index=t}) setfenv(s,r)local d,l=pcall(s)if not d then error(l,0)end if l==nil then l={} for u,c in pairs(r)do l[u]=c end end t[n]=l return l else return error"file not found"end end local i={} a["lexer"]=" local function e(i,n,s)local h,r=false for d=n,#i do if i:sub(d,d)==\"\\\\\"then r=true elseif not r and i:sub(d,d)==s then h=d break elseif i:sub(d,d)==\"\\n\"then return false,\"unexpected [newline] in string\"else r=false end end if not h then return false,\"expected [\"..s..\"] to close string\"end return h end local function t(i)local n,s=\"\" for h=1,#i do if s then if i:sub(h,h)==\"\\\"\"then n=n..\"\\\"\"elseif i:sub(h,h)==\"'\"then n=n..\"'\"elseif i:sub(h,h)==\"0\"then n=n..string.char(0)elseif i:sub(h,h)==\"\\\\\"then n=n..\"\\\\\"end s=false elseif i:sub(h,h)==\"\\\\\"then s=true else n=n..i:sub(h,h)end end return n end local a={[\"{\"]=\"BRACKET\",[\"}\"]=\"BRACKET\",[\"[\"]=\"BRACKET\",[\"]\"]=\"BRACKET\",[\"(\"]=\"BRACKET\",[\")\"]=\"BRACKET\",[\"+\"]=\"MATHOP\",[\"-\"]=\"MATHOP\",[\"*\"]=\"MATHOP\",[\"/\"]=\"MATHOP\",[\"^\"]=\"MATHOP\",[\"%\"]=\"MATHOP\",[\"==\"]=\"LOGICOP\",[\"!=\"]=\"LOGICOP\",[\">=\"]=\"LOGICOP\",[\"<=\"]=\"LOGICOP\",[\">\"]=\"LOGICOP\",[\"<\"]=\"LOGICOP\",[\"!\"]=\"LOGICUNOP\",[\"#\"]=\"UNOP\",[\"@\"]=\"UNOP\",[\".\"]=\"INDEX\",[\",\"]=\"SEPARATOR\",[\";\"]=\"ENDSTAT\"}local o={}function o:push(i,n) table.insert(self.tokens,{type=\"token\",tokentype=i,value=n,line=self.line})end function o:pop()table.remove(self.tokens,# self.tokens)end function o:throw(i) self.state=\"errored\"self.result=\"[\"..self.line..\"]: \"..i end function o:next()if self.state~=\"lexing\"then return end if self.pos>#self.text then self.result=\"done\"return end local i=self.text:sub(self.pos,self.pos) if i=='\"'or i==\"'\"then local n,s=e(self.text,self.pos+1,i) if n then local h=t(self.text:sub( self.pos+1,n-1)) self:push(\"STRING\",h)self.pos=n+1 return\"STRING\",h else self:throw(s)end elseif i==\"\\n\"then self.line=self.line+1 self.pos=self.pos+1 return\"NEWLINE\"elseif i== \"/\"then if self.text:sub(self.pos+1,self.pos+1)==\"/\"then local n=self.text:find(\"\\n\",self.pos+2)if n then self.pos=n+1 else self.pos=#self.text+1 end self.line=self.line+1 return\"COMMENT\"elseif self.text:sub(self.pos+1,self.pos+1)==\"*\"then local n=self.text:find(\"*/\",self.pos+2) if n then for s=self.pos+2,n-1 do if self.text:sub(s,s)==\"\\n\"then self.line=self.line+1 end end self.pos=n+2 return\"MLCOMMENT\"else self:throw\"expected [*/] to close comment\"end else self:push(\"MATHOP\",\"/\")self.pos=self.pos+1 return\"MATHOP\",\"/\"end elseif i:find\"%s\"then self.pos=self.pos+1 return\"WHITESPACE\"elseif self.text:find(\"^%-?%d*%.?%d+\",self.pos)then local s=self.text:match(\"^(%-?%d*%.?%d+)\",self.pos)self.pos=self.pos+#s local h=self.text:match(\"^(e%-?%d+)\",self.pos)if h then s=s..h self.pos=self.pos+#h end local r=tonumber(s) if s:find\"%.\"or s:find\"e\"or math.floor(r)~=r then self:push(\"NUMBER\",r)return\"NUMBER\",r else self:push(\"INTEGER\",r)return\"INTEGER\",r end elseif i:find\"[a-zA-Z_]\"then local n=i self.pos=self.pos+1 while self.text:sub(self.pos,self.pos):find\"[a-zA-Z_0-9]\"do n=n..self.text:sub(self.pos,self.pos)self.pos=self.pos+1 end self:push(\"NAME\",n)return\"NAME\",n else local s=a[i]if a[self.text:sub(self.pos,self.pos+1)]then i=self.text:sub(self.pos,self.pos+1)s=a[i]self.pos= self.pos+1 end self.pos= self.pos+1 s=s or\"SYMBOL\"self:push(s,i)return s,i end end function o:lex()while self:next()do end if self.state==\"errored\"then return false,self.result end return self.result end function o:tostring()local i=\"\"for n=1,#self.tokens do i=i.. self.tokens[n].tokentype..\" [\"..  self.tokens[n].value..\"] : \"..self.tokens[n].line..\"\\n\"end return i:sub(1,-2)end return function(i)local n={}n.state=\"lexing\"n.result=nil n.line=1 n.tokens={}n.text=i n.pos=1 setmetatable(n,{__index=o,__tostring=function(s)return s:tostring()end})return n end" a["lexanalyser"]="local e={} function e:peek(t)t=t or 0 if self.tokens[self.token+t]then return self.tokens[self.token+t].tokentype,self.tokens[self.token+t].value, self.tokens[self.token+t].line end end function e:is(t,a,o)a=a or 0 if self.tokens[self.token+a]then local i=self.tokens[self.token+a] return i.type==t and(o==nil or i.value==o)end end function e:next()self.token=self.token+1 if self.tokens[self.token]then self.line=self.tokens[self.token].line else self.ended=true end end function e:closing(t,a,o,i)local n=1 for s=1,#self.tokens-self.token+1 do if self:is(t,s,a)then n=n-1 if n==0 then return s+self.tokens-1 end elseif self:is(o,s,i)then n=n+1 end end end return function(t)local a={}a.ended=false a.tokens=t.tokens a.token=1 a.line= (t.tokens[1]or{}).line or 1 return setmetatable(a,{__index=e})end"i["lexer"]=o"lexer"i["lexanalyser"]=o"lexanalyser"return i