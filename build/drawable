 -- drawable 1.0.5 by Benedict Allen
 --[[ The MIT License (MIT)

Copyright (c) 2015 Benedict Allen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 ]]
local e="drawable" local t=setmetatable({},{__index=getfenv()})t._G=t local a={} local function o(i) if a[i]then local n,s=loadstring(a[i],"["..e.."] "..i..".lua")if not n then error(s,0)end local h=setmetatable({},{__index=t}) setfenv(n,h)local r,d=pcall(n)if not r then error(d,0)end if d==nil then d={} for l,u in pairs(h)do d[l]=u end end t[i]=d return d else return error"file not found"end end a.main="local e,t={} local function a(s,h,r,d,l,u,c,m)local f=math.max(s,l)local p=math.max(h,u)local v= math.min(s+r,l+c)-f+1 local b=math.min(h+d,u+m)-p+1 if v<1 or b<1 then return false end return f,p,v,b end local o=type local function i(s)local h=o(s) pcall(function()local r=getmetatable(s)h= o(r.__type)==\"string\"and r.__type or h end)return h end local function n(...) local s={...}local h=true if#s%2 ==1 then h=s[1]table.remove(s,1)end local r=#s/2 for d=1,r do if i(s[d+r])~=s[d]then if h then return error(\"expected \"..s[d]..\" for arg #\".. d..\", got \"..i(s[d+r]),2)end return false end end return true end function e:new(s,h)n(\"number\",\"number\",s,h)local r={}r.pixels={}r.width=s r.height=h r.bound_list={}r.bounds=false r.rotation=0 r.scale_x=1 r.scale_y=1 r.anchor_x=0 r.anchor_y=0 for d=1,h do r.pixels[d]={} for l=1,s do r.pixels[d][l]={bc=1,tc=32768,char=\" \"}end end return setmetatable(r,{__index=self,__type=\"drawable\"})end function e:pixelInBounds(s,h) if self.bounds then if self.bounds.x then return   s>=self.bounds.x and h>=self.bounds.y and s<self.bounds.x+self.bounds.width and h<self.bounds.y+self.bounds.height end return false end return true end function e:setPixel(s,h,r,d,l) n(\"number\",\"number\",\"number\",\"number\",\"string\",s,h,r,d,l) if self.pixels[h]and self.pixels[h][s]then if not self:pixelInBounds(s,h)then return false,\"pixel not in bounds\"end if l==\"\"then return end if r==0 then r=self.pixels[h][s].bc end if d==0 then d=self.pixels[h][s].tc l=self.pixels[h][s].char end self.pixels[h][s]={bc=r,tc=d,char=l}return true end return false,\"pixel out of range\"end function e:getPixel(s,h)n(\"number\",\"number\",s,h) if self.pixels[h]and self.pixels[h][s]then return self.pixels[h][s].bc, self.pixels[h][s].tc,self.pixels[h][s].char end end function e:foreach(s)local h={} for r=1,self.width do h[r]={}for d=1,self.height do local l,u,c=self:getPixel(r,d) local m,f,w=s(l,u,c,r,d) h[r][d]={bc=m or l,tc=f or u,char=w or c,same=not(m or f or w)}end end for r=1,self.width do for d=1,self.height do local l=h[r][d]if not l.same then self:setPixel(r,d,l.bc,l.tc,l.char)end end end end function e:setBounds(s,r,d,l)if s then n(\"number\",\"number\",\"number\",\"number\",s,r,d,l) self.bounds={x=s,y=r,width=d,height=l}else self.bounds={}end end function e:addBound(s,r,d,l)n(\"number\",\"number\",\"number\",\"number\",s,r,d,l) local h={}self.bounds[h]={x=s,y=r,w=d,h=l} if self.bounds then if self.bounds.x then local s,r,d,l=a(s,r,d,l,self.bounds.x,self.bounds.y,self.bounds.width,self.bounds.height)self.bounds={x=s,y=r,width=d,height=l}end else self.bounds={x=s,y=r,width=d,height=l}end return h end function e:removeBound(s)self.bound_list[s]=nil self:updateBounds()end function e:updateBounds()local s,r,d,l for h,u in pairs(self.bound_list)do if s then s,r,d,l=a(s,r,d,l,u.x,u.y,u.w,u.h)else s,r,d,l=u.x,u.y,u.w,u.h end if not s then self.bounds={x=false}return end end self.bounds={x=s,y=r,width=d,height=l}end function e:clearBounds()self.bounds=false self.bound_list={}end function e:resize(s,h,r,d,l,u) if d or l or u then if r then n(\"number\",\"number\",\"number\",\"number\",\"number\",\"string\",s,h,r,d,l,u)else n(\"number\",\"number\",\"nil\",\"number\",\"number\",\"string\",s,h,nil,d,l,u)end else if r then n(\"number\",\"number\",\"number\",s,h,r)else n(\"number\",\"number\",s,h)end end d=d or 1 l=l or 32768 u=u or\" \" if r then local c=s/self.width local m=h/self.height self.width=s self.height=h self:foreach(function(f,w,p,v,b)local f,w,p=self:getPixel(math.floor(v/c+.5),math.floor( b/m+.5))return f or d,w or l,p or u end)else while self.height<h do local c={} for m=1,self.width do c[m]={bc=d,tc=l,char=u}end table.insert(self.pixels,c) self.height=self.height+1 end while self.height>h do table.remove(self.pixels,#self.pixels)self.height= self.height-1 end while self.width<w do for c=1,self.height do table.insert(self.pixels[c],{bc=d,tc=l,char=u})end self.width=self.width+1 end while self.width>w do for c=1,self.height do table.remove(self.pixels[c],#self.pixels[c])end self.width=self.width-1 end end end function e:drawTo(s,h,r)h,r=h or 1,r or 1 local d=2*math.pi local function l(z,_,E,T,A) z,_=z-1-self.anchor_x*self.width, _-1-self.anchor_y*self.height z=z*T _=_*A local O,I=math.atan2(z,_)-E,math.sqrt(z^2+_^2)return 1+math.sin(O)*I,1+math.cos(O)*I end local function u(z,_,E,T,A)z,_=z-1,_-1 local O,I=math.atan2(z,_)+E,math.sqrt(z^2+_^2)return 1+math.sin(O)*I/T+self.anchor_x*self.width, 1+math.cos(O)*I/A+self.anchor_y*self.height end local c=self.rotation*math.pi/180 local m,f=l(1,1,c,self.scale_x,self.scale_y)local w,y=l(self.width,1,c,self.scale_x,self.scale_y) local p,v=l(self.width,self.height,c,self.scale_x,self.scale_y)local b,g=l(1,self.height,c,self.scale_x,self.scale_y) local k,q=math.min(m,w,p,b),math.max(m,w,p,b)local j,x=math.min(f,y,v,g),math.max(f,y,v,g) for z=math.floor(k),math.ceil(q) do for _=math.floor(j),math.ceil(x)do local E,T=u(z,_,c,self.scale_x,self.scale_y) local A,O,I=self:getPixel(math.floor(E+.5),math.floor(T+.5))if A then s:setPixel(math.floor(z+h-.5),math.floor(_+r-.5),A,O,I)end end end end function e:redirect()t=self end function e.current()return t end return e"return o"main"