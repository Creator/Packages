 -- buffer 1.0.1 by Benedict Allen
 --[[ The MIT License (MIT)

Copyright (c) 2015 Benedict Allen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 ]]
local e="buffer" local t=setmetatable({},{__index=getfenv()})t._G=t local a={} local function o(i) if a[i]then local n,s=loadstring(a[i],"["..e.."] "..i..".lua")if not n then error(s,0)end local h=setmetatable({},{__index=t}) setfenv(n,h)local r,d=pcall(n)if not r then error(d,0)end if d==nil then d={} for l,u in pairs(h)do d[l]=u end end t[i]=d return d else return error"file not found"end end a.main="local e=type local function t(h)local r=e(h) pcall(function()local d=getmetatable(h)r= e(d.__type)==\"string\"and d.__type or r end)return r end local a,t,o,i=math,t,table local n={}n.textscale=1 n.redraw=false n.cursor=false local function s(h,r,d,l,u,c)h.setCursorPos(r,d) h.setBackgroundColour(l)h.setTextColour(u)h.write(c)end function n:create(r,d) local h=setmetatable({},{__index=self,__type=\"buffer\"})r=r or 0 d=d or 0 h.width=r or 0 h.height=d or 0 h.pixels={}h.last={}for l=1,d do h.pixels[l]={}h.last[l]={} for u=1,r do h.pixels[l][u]={bc=1,tc=1,char=\" \"}end end return h end function n:setPixel(h,r,d,l,u)local c=self h,r=a.floor(h+0.5),a.floor(r+0.5) if c.pixels[r]and c.pixels[r][h]then local m,f,w=c:getPixel(h,r) if t(d)==\"function\"then d=d(m)end if d==0 then d=m end if t(l)==\"function\"then l=l(f)end if l==0 then l,u=f,w end if u~=\"\"then c.pixels[r][h].bc=d c.pixels[r][h].tc=l c.pixels[r][h].char=u end return true end return false end function n:getPixel(h,r)h,r=a.floor(h+0.5),a.floor(r+0.5) if self.pixels[r]and self.pixels[r][h]then local d=self.pixels[r][h]return d.bc,d.tc,d.char end end function n:foreach(h)local r={} for d=1,self.width do for l=1,self.height do local u,c,m=self:getPixel(d,l) local f,w,y=h(u,c,m,d,l) if (f and f~=u)or(w and w~=c)or(y and y~=m)then r[#r+1]={bc=f or u,tc=w or c,char=y or m,x=d,y=l}end end end for d=1,#r do self:setPixel(r[d].x,r[d].y,r[d].bc,r[d].tc,r[d].char)end end function n:setCursorBlink(h,r,d)if h then h,r=a.floor(h+0.5),a.floor(r+0.5) self.cursor={x=h,y=r,tc=d or 1}else self.cursor=false end end function n:hasChanged(h,r)h,r=a.floor(h+0.5),a.floor(r+0.5) if self.pixels[r]and self.pixels[r][h]then local d=self.pixels[r][h]if not self.last[r][h]then self.last[r][h]={}return true end return d.bc~= self.last[r][h].bc or d.char~=self.last[r][h].char or (d.tc~=self.last[r][h].tc and d.char~=\" \")end end function n:draw(h,r,d)if self.redraw then return self:drawAll()end h=h or term r=r or 1 d=d or 1 if t(h.setTextScale)==\"function\"then h.setTextScale(self.textScale)end for l=1,self.height do local u for c=1,self.width do if self:hasChanged(c,l)then if u then if u.bc==self.pixels[l][c].bc and (u.tc== self.pixels[l][c].tc or self.pixels[l][c].char==\" \")then u.char=u.char.. self.pixels[l][c].char else s(h,u.x+r-1,u.y+d-1,u.bc,u.tc,u.char) u={x=c,y=l,bc=self.pixels[l][c].bc,tc=self.pixels[l][c].tc,char=self.pixels[l][c].char}end else u={x=c,y=l,bc=self.pixels[l][c].bc,tc=self.pixels[l][c].tc,char=self.pixels[l][c].char}end self.last[l][c]={bc=self.pixels[l][c].bc,tc=self.pixels[l][c].tc,char=self.pixels[l][c].char}elseif u then s(h,u.x+r-1,u.y+d-1,u.bc,u.tc,u.char)u=nil end end if u then s(h,u.x+r-1,u.y+d-1,u.bc,u.tc,u.char)end end if self.cursor then h.setCursorPos(r+self.cursor.x-1,d+self.cursor.y-1)h.setTextColour(self.cursor.tc) h.setCursorBlink(true)else h.setCursorBlink(false)end end function n:drawAll(h,r,d)self.allchanged=false h=h or term r=r or 1 d=d or 1 if h.setTextScale then h.setTextScale(self.textScale)end for l=1,self.height do h.setCursorPos(r,l+d-1) for u=1,self.width do local c,m,f=self:getPixel(u,l)h.setBackgroundColour(c) h.setTextColour(m)h.write(f) if f==\"\"then h.setCursorPos(r+u,l+d-1)end self.last[l][u]={bc=c,tc=m,char=f}end end if self.cursor then h.setCursorPos(r+self.cursor.x-1,d+self.cursor.y-1)h.setTextColour(self.cursor.tc) h.setCursorBlink(true)else h.setCursorBlink(false)end end function n:resize(h,r,d,l,u)d=d or 1 l=l or 1 u=u or\" \" while self.height<r do local c={}for m=1,self.width do c[m]={bc=d,tc=l,char=u}end o.insert(self.pixels,c) o.insert(self.last,{})self.height=self.height+1 end while self.height>r do o.remove(self.pixels,#self)o.remove(self.last,# self.last)self.height=self.height-1 end while self.width<h do for c=1,self.height do o.insert(self.pixels[c],{bc=d,tc=l,char=u})end self.width=self.width+1 end while self.width>h do for c=1,self.height do o.remove(self.pixels[c],#self.pixels[c])end self.width=self.width-1 end end function n:redirect(h) if t(h)==\"buffer\"then i=h else return error\"expected <buffer> redirect\"end end function n.current()return i end return n"return o"main"